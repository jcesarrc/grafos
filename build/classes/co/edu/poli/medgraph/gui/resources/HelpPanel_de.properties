
toggleHelp.text = Hilfe
toggleHelp.toolTipText = Zeige/Verstecke Hilfe

basics.title = Grundlegendes
dijkstraAlgorithm.title = Dijkstra's Algorithmus
runAlgorithm.title = Algorithmus ausführen
graphEdit.title = Graphen bearbeiten
graphView.title = Graphansicht

# BASICS

help_basics_graph = Was ist ein Graph?
help_basics_graph_c = Ein Graph ist eine Menge von Objekten, genannt <i>Knoten</i>, die durch <i>Kanten</i> miteinander verbunden sind. In einem <i>ungerichteten</i> Graphen ist eine Verbindung von Punkt A zu Punkt B das selbe wie eine Verbindung von Punkt B zu Punkt A. In einem <i>gerichteten</i> Graphen werden die zwei Richtungen jedoch als unterschiedliche Kanten betrachtet. Ein Graph wird zus&auml;tzlich <i>gewichtet</i> genannt wenn jeder Kante eine positive Zahl (Gewicht) zugeordnet ist.<br><center><img src="g1.png"></center>Dieses Programm verwendet nur <i>gerichtete gewichtete Graphen</i>, in dem Knoten Orte repr&auml;sentieren (wie z.B. St&auml;dte) und Kanten die Verbindungen (z.B. Stra&szligen) zwischen diesen Orten darstellen. Das Gewicht jeder Kante reflektiert die geographische Distanz zwischen den von ihr verbundenen Orten.

help_basics_algorithm = Was ist ein Algorithmus?
help_basics_algorithm_c = Einen Algorithmus kann man sich als einen eindeutigen Plan vorstellen, den ein Computer ausf&uuml;hren kann um ein bestimmtes Problem zu l&ouml;sen. Von einer gegebenen Eingabe (z.B. Liste von Zahlen) wird vom Algorithmus ein Ergebnis berechnet (z.B. Summe der Eingabezahlen).

help_basics_program_use = Wie das Programm benutzen?
help_basics_program_use_c = Mit diesem Programm kannst du Dijkstra's Algorithmus ausprobieren, der den k&uuml;rzesten Weg von einem Startknoten zu allen anderen Knoten in einem Graphen finden kann. Du musst zuerst einen Graphen laden, generieren oder manuell erstellen bevor der Algorithmus darauf laufen kann.

# GRAPH EDIT

help_graph_node_add = Knoten hinzufügen
help_graph_node_add_c = Knoten k&ouml;nnen entweder durch Doppel-klicken auf eine freie Stelle im Graphen oder durch Verwendung des Kontextmen&uuml;s hinzugef&uuml;gt werden.

help_graph_node_delete = Knoten löschen
help_graph_node_delete_c = Du kannste einzelne oder alle markierten Knoten vom Kontextmen&uuml; aus l&ouml;schen. Alle Kanten die mit einem der gel&ouml;schten Knoten verbunden waren, werden auch entfernt.

help_graph_node_link = Knoten verbinden
help_graph_node_link_c = Um zwei Knoten zu verbinden (eine Kante zu erstellen), ziehe entweder mit der linken Maustaste eine Verbindung vom Ausgangs- zum Ziel- Knoten oder w&auml;hle die Knoten aus die du verbinden m&ouml;chtest und benutze das Kontextmen&uuml;. Bedenke das alle Kanten gerichtet sind (Einbahnstra&szligen). Du musst also zwei Kanten, jede f&uuml;r eine Richtung, erstellen um zwei Knoten gegenseitig zu verbinden.

help_graph_node_unlink = Knoten trennen
help_graph_node_unlink_c = Bewege die Maus &uuml;ber eine Kante bis sie hervorgehoben wird (blau gef&auml;rbt), dann benutze das Kontextmen&uuml; um sie zu l&ouml;schen.

help_graph_node_select = Knoten auswählen
help_graph_node_select_c = Selektiere Knoten mit gedr&uuml;ckter linker Maustaste (funktioniert wie in den meisten Betriebssystemen).

help_graph_node_move = Knoten verschieben
help_graph_node_move_c = Du kannst (alle gew&auml;hlten) Knoten mit gedr&uuml;ckter rechter Maustaste verschieben.

# GRAPH VIEW

help_graph_navigate = Navigieren
help_graph_navigate_c = Du kannst den Graphen mit der rechten Maustaste verschieben. Halte zus&auml;tzlich die Shift-Taste gedr&uuml;ckt um den Graphen zu rotieren.

help_graph_zoom = Zoomen
help_graph_zoom_c = Vergr&ouml;&szligern und verkleinern kann mit dem Mausrad oder den Toolbar-Buttons gemacht werden. Du kannst mit dem entsprechenden Button in der Toolbar auch immer wieder zur Originalgr&ouml;&szlige (und Ausgangs-Rotation) zur&uuml;ckkehren.

# ALGORITHM

help_algorithm_switch = Loslegen
help_algorithm_switch_c = Dr&uuml;cke den Button unten rechts um den Algorithmus zu initialisieren wenn du mit dem Graphen fertig bist. Die rechte Seite des Hauptfenster wird dann sichtbar. Ein zuf&auml;lliger Startknoten wird verwendet falls du keinen ausgew&auml;hlt hast.

help_algorithm_controls = Steuerung
help_algorithm_controls_c = Nachdem der Algorithmus initialisiert ist, kannst du ihn mit dem Play-Button automatisch ablaufen lassen oder jeden Schritt manuell weiterschalten. Du kannst auch Schritte zur&uuml;ck gehen oder direkt an das Ende oder den Anfang springen.

help_algorithm_speed = Ausführungsgeschwindigkeit
help_algorithm_speed_c = Du kannst mit dem Slider auf der rechten Seite des Hauptfenster die Ausf&uuml;hrungsgeschwindigkeit &auml;ndern. Dadurch wird die Dauer der Animationen angepasst wenn diese aktiviert sind. Wenn Animationen deaktiviert sind, dann wird bei automatischem Ablaufen des Algorithmus die Verz&ouml;gerung zwischen zwei aufeinanderfolgenden Schritten ge&auml;ndert.

# DIJKSTRA

help_dijkstra_algorithm_who = Wer ist Dijkstra?
help_dijkstra_algorithm_who_c = Edsger Wybe Dijkstra (11. Mai 1930 - 6. August 2002) war ein niederl&auml;ndischer Informatiker. Er erhielt 1972 den A. M. Turing Award (oft als &quot;Nobelpreis der Informatik&quot; angesehen) f&uuml;r grundlegende Beitr&auml;ge zum Gebiet der Programmiersprachen.<br><center><img src="dijkstra.jpg"></center>

help_dijkstra_algorithm_what = Was macht der Algorithmus?
help_dijkstra_algorithm_what_c = Er l&ouml;st das &quot;K&uuml;rzeste Wege Problem mit einem Ausgangspunkt&quot;, d.h. findet die k&uuml;rzesten Wege von einem Startknoten zu allen anderen erreichbaren Knoten in einem Graphen. Die Wegl&auml;nge zwischen zwei Knoten ist die Summe aller L&auml;ngen von Kanten auf dem Weg.

help_dijkstra_algorithm_how = Wie funktioniert er?
help_dijkstra_algorithm_how_c = Anstatt alle m&ouml;glichen Wege zwischen dem Startknoten und allen anderen Knoten zu &uuml;berpr&uuml;fen, werden die k&uuml;rzesten Wege zu n&auml;her am Startknoten liegenden Knoten zuerst gefunden (die k&uuml;rzeren k&uuml;rzesten Wege). Dieses zus&auml;tzliche Wissen wird dann dazu genutzt die Wege zu weiter entfernten Knoten zu finden.<br>Es ist einfacher die k&uuml;rzesten Wege zu Orten zu finden die n&auml;her am Start liegen. Tats&auml;chlich ist die direkte Verbindung zum n&auml;hesten mit dem Start verbundenen Knoten der k&uuml;rzeste Weg zu diesem. Damit ist der k&uuml;rzeste Weg zu einem zus&auml;tzlichen Knoten bekannt. Dann wird &uuml;berpr&uuml;ft welche Knoten von dort aus erreichbar sind. Vielleicht kann sogar ein bereits gefundener Weg verbessert werden. Der Algorithmus macht so weiter und in jedem Schritt wird der k&uuml;rzeste Weg zu einem zus&auml;tzlichen Knoten gefunden.

help_dijkstra_algorithm_where = Wo wird er benutzt?
help_dijkstra_algorithm_where_c = Dijsktra's Algorithmus ist ein gutes Beispiel daf&uuml;r welchen Einflu&szlig die Forschung in der Informatik auf moderne Technologie hat (z.B. Navigationssysteme, Google Maps). Der Algorithmus wird von aktuellen Wegfindungssystemen in seiner urspr&uuml;nglichen Form jedoch nicht verwendet. Aber er hat sicherlich den Grundstein f&uuml;r sie gelegt seitdem er 1959 ver&ouml;ffentlich wurde.<br>
Dijsktra's Algorithmus kann sogar in allgemeinerem Kontext eingesetzt werden. Kanten-Gewichte k&ouml;nnen zum Beispiel anhand von Fahrzeiten oder Preise anstatt geographischer Distanzen gew&auml;hlt werden. Es ist zudem auch m&ouml;glich andere, oft auf den ersten Blick bezugslose, Probleme in k&uuml;rzeste Wege Probleme zu transformieren, die dann mit Dijsktra's Algorithmus gel&ouml;st werden k&ouml;nnen.