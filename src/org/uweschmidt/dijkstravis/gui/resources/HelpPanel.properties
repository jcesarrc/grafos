toggleHelp.Action.icon = icons/32/help-browser.png
toggleHelp.text = Help
toggleHelp.toolTipText = Show/Hide Help

basics.title = Basics
dijkstraAlgorithm.title = Dijkstra's algorithm
runAlgorithm.title = Running the algorithm
graphEdit.title = Graph editing
graphView.title = Graph view

# BASICS

help_basics_graph = What is a graph?
help_basics_graph_c = A graph is a set of objects called points, <i>nodes</i>, or vertices connected by links called lines or <i>edges</i>. In an <i>undirected</i> graph, a line from point A to point B is considered to be the same thing as a line from point B to point A. In a <i>directed graph</i>, the two directions are counted as being distinct arcs or directed edges. A graph is additionally called <i>weighted</i> if a positive number (weight) is assigned to each edge.<br><center><img src="g1.png"></center>This program only uses <i>directed weighted graphs</i> where nodes represent locations (such as cities) and edges represent connections between those locations (e.g. roads). The weight of each edge reflects the geographic distance between the locations it is connecting.

help_basics_algorithm = What is an algorithm?
help_basics_algorithm_c = An algorithm can be thought of as an unambiguous plan to be followed by a computer to solve a certain problem. A given input (e.g. list of numbers) is processed by the algorithm to calculate a result (e.g. sum of input numbers).

help_basics_program_use = How to use this program?
help_basics_program_use_c = This program allows you to play with Dijkstra's algorithm. It can find the shortest paths from a start node to all other nodes in a graph. You either need to load, generate or manually create a graph before the algorithm can be run on it.

# GRAPH EDIT

help_graph_node_add = Adding nodes
help_graph_node_add_c = Nodes can either be added by double-clicking on a free spot in the graph area or by using the context menu.

help_graph_node_delete = Deleting nodes
help_graph_node_delete_c = You can delete a single or all selected nodes from the context menu. All edges that either originated or ended in one of the deleted nodes will be removed too.

help_graph_node_link = Connecting nodes
help_graph_node_link_c = To connect two nodes (create an edge), either drag with the left mouse button from the source to the destination node or select the nodes you want to connect and use the context menu. Note that all edges are directed (one-way only). You have to create two edges, one for each direction, to mutually connect two nodes.

help_graph_node_unlink = Disconnecting nodes
help_graph_node_unlink_c = Move the mouse cursor over an edge until it is highlighted (colored blue), then bring up the context menu to delete it.

help_graph_node_select = Selecting nodes
help_graph_node_select_c = Select nodes with pressed left mouse button (works like in most operating systems).

help_graph_node_move = Moving nodes
help_graph_node_move_c = You can move (all selected) nodes around by dragging them with the right mouse button.

# GRAPH VIEW

help_graph_navigate = Navigating
help_graph_navigate_c = You can pan the graph by right dragging in the graph area. Rotate the graph by additionally holding down the shift button.

help_graph_zoom = Zooming
help_graph_zoom_c = Zoom in and out by either using the mousewheel or toolbar buttons. You can always return to initial zoom (and rotation) settings by using the corresponding button on the toolbar.

# ALGORITHM

help_algorithm_switch = Getting started
help_algorithm_switch_c = If you're done making the graph press the button at the bottom right to initialize the algorithm. The right side of the main window will be revealed. A random node will become the start node if you haven't selected one yourself.

help_algorithm_controls = Controls
help_algorithm_controls_c = After the algorithm is initialized, you can either press the play button to automatically advance the algorithm or step through it manually. You can also step backwards or directly jump to the end or beginning.

help_algorithm_speed = Execution speed
help_algorithm_speed_c = The execution speed slider changes the duration of animations if they're enabled. If anmations are disabled, it changes the delay between two successive steps when automatically advancing the algorithm with play button.


# DIJKSTRA

help_dijkstra_algorithm_who = Who is Dijkstra?
help_dijkstra_algorithm_who_c = Edsger Wybe Dijkstra (May 11, 1930 - August 6, 2002) was a Dutch computer scientist. He received the 1972 A. M. Turing Award (often recognized as the "Nobel Prize of computing") for fundamental contributions in the area of programming languages.<br><center><img src="dijkstra.jpg"></center>

help_dijkstra_algorithm_what = What does the algorithm do?
help_dijkstra_algorithm_what_c = It solves the "single-source shortest paths problem", i.e. finds the shortest paths from a single start node to all other reachable nodes in a graph. The path length between two nodes is the sum of all lengths of edges on the path.

help_dijkstra_algorithm_how = How does it work?
help_dijkstra_algorithm_how_c = Instead of checking all possible paths between the start node and all other nodes, it first finds the shortest paths to nodes which are closer to the start (the shorter shortest-paths). It then uses that knowledge to find the paths to more distant locations.<br>It's easier to find the shortest path to locations which are closer to the start. In fact, the direct connection to the closest node connected to the start must be the shortest path to it. Now the shortest path to one additional node is known. It is then checked which nodes are reachable from there. Maybe there is also a shorter path from there to one of the nodes a path has already been found. It goes on like this and every step of the algorithm the shortest path to a node is found.

help_dijkstra_algorithm_where = Where is it used?
help_dijkstra_algorithm_where_c = Dijsktra's algorithm is a good example of how research in computer science and computers have an impact on modern technology (e.g. navigation systems, Google Maps). Dijkstra's algorithm in its original form isn't used by today's state of the art route-finding applications. But it sure lay the foundations for them since it was published in 1959.<br>Dijsktra's algorithm is actually much more general. Edge lengths could for instance resemble travel times or fares instead of geographic distances. It is also possible to convert other, often at first sight unrelated, problems to shortest-paths problems which can then be solved with Dijkstra's algorithm.